from distutils.command.config import config

from aiogram.types import Message, ShippingOption, ShippingQuery, LabeledPrice, PreCheckoutQuery
from aiogram.types.message import ContentType
from aiogram import Bot
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

from message import MESSAGES, teh_message
from configure import BOT_TOKEN

storage = MemoryStorage()
chatbot = Bot(token='6089974069:AAGslyieQbUFasP9VyuEAmFLAXcR-vknG9g')
dp = Dispatcher(chatbot, storage=storage)
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)

website_url = 'https://aliceandcat.ru/gotovye-domiki//'
website_button = InlineKeyboardButton('–î–æ–º–∏–∫–∏ –ø–æ –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä—É', url=website_url)
inline_keyboard = InlineKeyboardMarkup().add(website_button)

@dp.message_handler(lambda message: message.text == '–ö–∞—Ç–∞–ª–æ–≥')
async def buy_process(message: Message):
    await message.answer(MESSAGES['item_title'], reply_markup=inline_keyboard)

catalog_button = KeyboardButton('–ö–∞—Ç–∞–ª–æ–≥')
teh_button = KeyboardButton('–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞')
stocks_button = KeyboardButton('–ê–∫—Ü–∏–∏')
keyboard.add(catalog_button, teh_button, stocks_button )

@dp.message_handler(commands=['start'])
async def start_cmd(message: Message):
    await message.answer(MESSAGES['start'], reply_markup=keyboard)
@dp.message_handler(commands=['help'])
async def help_cmd(message: Message):
    await message.answer(MESSAGES['help'])

class SupportStates(StatesGroup):
    waiting_for_text = State()

@dp.message_handler(commands=['support'])
async def process_support_command(message: Message):
    await message.reply("–ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞? –û–ø–∏—à–∏—Ç–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ.",
                        reply_markup=ReplyKeyboardRemove())
    await SupportStates.waiting_for_text.set()

@dp.message_handler(state=SupportStates.waiting_for_text, content_types=types.ContentType.TEXT)
async def process_support_text(message: Message, state: FSMContext):
    await message.reply("–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    user_text = message.text
    await chatbot.send_message(867798233, f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}:\n\n{user_text}")
    await state.finish()


@dp.message_handler(lambda message: message.text == '–ê–∫—Ü–∏–∏')
async def buy_process(message: Message):
    await message.answer(MESSAGES['stocks'])

@dp.message_handler(lambda message: message.text == '–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞')
async def start_cmd(message: Message):
    try:
        cid = message.chat.id
        uid = message.from_user.id
        await message.answer(MESSAGES['teh'])
        msg = await message.answer("*üì® | –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–µ*", parse_mode='Markdown')
        dp.register_message_handler(teh_message, lambda message: message.text, state='*')
    except Exception as e:
        await message.answer(f'üö´ | –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}')


@dp.message_handler()
async def teh_message(message: Message):
    pass

@dp.shipping_query_handler(lambda q: True)
async def shipping_process(shipping_query: ShippingQuery):
    if shipping_query.shipping_address.country_code == 'AU':
        return await dp.answer_shipping_query(
            shipping_query.id,
            ok=False,
            error_message=MESSAGES['AU_error']
        )

@dp.pre_checkout_query_handler(lambda q: True)
async def checkout_process(pre_checkout_query: PreCheckoutQuery):
    await dp.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: Message):
    await dp.send_message(
        message.chat.id,
        MESSAGES['successful_payment'].format(total_amount=message.successful_payment.total_amount // 100,
                                              currency=message.successful_payment.currency)
    )

if __name__ == "__main__":
    executor.start_polling(dp)